from numarray import *

def write_namelist(filename, inputs):
#+##`write_namelist, filename, inputs`
#+Writes namelist file
#+
#+###Input Arguments
#+     **filename**: Name of the namelist file
#+
#+     **inputs**: Input structure
#+
#+###Example Usage
#+```idl
#+IDL> write_namelist, filename, inputs
#+```
   n_params = 2
   def _ret():  return (filename, inputs)
   
   info('Writing namelist file...')
   
   fidasim_version = get_version(get_fidasim_dir())
   
   openw(55, filename)
   printf(55, '!! Created: ', systime())
   printf(55, '!! FIDASIM version: ' + fidasim_version)
   printf(55, '!! Comment: ' + inputs.comment)
   printf(55, '&fidasim_inputs')
   printf(55, '')
   printf(55, '!! Shot Info')
   printf(55, inputs.shot, f='("shot = ", i6 ,"    !! Shot Number")')
   printf(55, inputs.time, f='("time = ", 1f8.5 ,"    !! Time [s]")')
   printf(55, "runid = '" + inputs.runid + "'    !! runID")
   printf(55, "result_dir = '" + inputs.result_dir + "'    !! Result Directory")
   printf(55, '')
   printf(55, '!! Input Files')
   printf(55, "tables_file = '" + inputs.tables_file + "'    !! Atomic Tables File")
   printf(55, "equilibrium_file = '" + inputs.equilibrium_file + "'    !! File containing plasma parameters and fields")
   printf(55, "geometry_file = '" + inputs.geometry_file + "'    !! File containing NBI and diagnostic geometry")
   printf(55, "distribution_file = '" + inputs.distribution_file + "'    !! File containing fast-ion distribution")
   printf(55, '')
   printf(55, '!! Simulation Switches')
   printf(55, inputs.calc_bes, f='("calc_bes = ",i2 , "    !! Calculate Beam Emission and Halo Spectra")')
   printf(55, inputs.calc_brems, f='("calc_brems = ",i2 , "    !! Calculate Bremsstrahlung")')
   printf(55, inputs.calc_fida, f='("calc_fida = ",i2 , "    !! Calculate FIDA Spectra")')
   printf(55, inputs.calc_npa, f='("calc_npa = ",i2 , "   !! Calculate NPA")')
   printf(55, inputs.calc_birth, f='("calc_birth = ",i2 , "    !! Calculate Birth Profile")')
   printf(55, inputs.calc_fida_wght, f='("calc_fida_wght = ",i2 , "    !! Calculate FIDA weights")')
   printf(55, inputs.calc_npa_wght, f='("calc_npa_wght = ",i2 , "    !! Calculate NPA weights")')
   printf(55, inputs.dump_dcx, f='("dump_dcx = ",i2,"    !! Dump DCX neutrals and spectra")')
   printf(55, '')
   printf(55, '!! Debugging Switches')
   printf(55, inputs.no_flr, f='("no_flr = ",i2,"    !! Turn off Finite Larmor Radius effects")')
   printf(55, inputs.load_neutrals, f='("load_neutrals = ",i2,"    !! Load neutrals from neutrals file")')
   printf(55, "neutrals_file = '" + inputs.neutrals_file + "'    !! File containing the neutral density")
   printf(55, inputs.verbose, f='("verbose = ",i2,"    !! Verbose")')
   printf(55, '')
   printf(55, '!! Monte Carlo Settings')
   printf(55, inputs.n_fida, f='("n_fida = ",i9,"    !! Number of FIDA mc particles")')
   printf(55, inputs.n_npa, f='("n_npa = ",i9,"    !! Number of NPA mc particles")')
   printf(55, inputs.n_nbi, f='("n_nbi = ",i9,"    !! Number of NBI mc particles")')
   printf(55, inputs.n_halo, f='("n_halo = ",i9,"    !! Number of HALO mc particles")')
   printf(55, inputs.n_dcx, f='("n_dcx = ",i9,"     !! Number of DCX mc particles")')
   printf(55, inputs.n_birth, f='("n_birth = ",i9,"    !! Number of BIRTH mc particles")')
   printf(55, '')
   printf(55, '!! Neutral Beam Settings')
   printf(55, inputs.ab, f='("ab = ",1f9.5,"     !! Beam Species mass [amu]")')
   printf(55, inputs.pinj, f='("pinj = ",1f9.3,"     !! Beam Power [MW]")')
   printf(55, inputs.einj, f='("einj = ",1f9.3,"     !! Beam Energy [keV]")')
   printf(55, inputs.current_fractions[0], f='("current_fractions(1) = ",1f9.5," !! Current Fractions (Full component)")')
   printf(55, inputs.current_fractions[1], f='("current_fractions(2) = ",1f9.5," !! Current Fractions (Half component)")')
   printf(55, inputs.current_fractions[2], f='("current_fractions(3) = ",1f9.5," !! Current Fractions (Third component)")')
   printf(55, '')
   printf(55, '!! Plasma Settings')
   printf(55, inputs.ai, f='("ai = ",1f9.5,"     !! Ion Species mass [amu]")')
   printf(55, inputs.impurity_charge, f='("impurity_charge = ",i3,"     !! Impurity Charge")')
   printf(55, '')
   printf(55, '!! Beam Grid Settings')
   printf(55, inputs.nx, f='("nx = ",i4,"    !! Number of cells in X direction (Into Plasma)")')
   printf(55, inputs.ny, f='("ny = ",i4,"    !! Number of cells in Y direction")')
   printf(55, inputs.nz, f='("nz = ",i4,"    !! Number of cells in Z direction")')
   printf(55, inputs.xmin, f='("xmin = ",1f9.3,"     !! Minimum X value [cm]")')
   printf(55, inputs.xmax, f='("xmax = ",1f9.3,"     !! Maximum X value [cm]")')
   printf(55, inputs.ymin, f='("ymin = ",1f9.3,"     !! Minimum Y value [cm]")')
   printf(55, inputs.ymax, f='("ymax = ",1f9.3,"     !! Maximum Y value [cm]")')
   printf(55, inputs.zmin, f='("zmin = ",1f9.3,"     !! Minimum Z value [cm]")')
   printf(55, inputs.zmax, f='("zmax = ",1f9.3,"     !! Maximum Z value [cm]")')
   printf(55, '!! Tait-Bryan Angles for z-y`-x`` rotation')
   printf(55, inputs.alpha, f='("alpha = ",1f9.5,"     !! Rotation about z-axis [rad]")')
   printf(55, inputs.beta, f='("beta  = ",1f9.5,"     !! Rotation about y`-axis [rad]")')
   printf(55, inputs.gamma, f='("gamma = ",1f9.5,"     !! Rotation about x``-axis [rad]")')
   printf(55, '!! Beam Grid origin in machine coordinates (cartesian)')
   printf(55, inputs.origin[0], f='("origin(1) = ",1f9.3,"     !! U value [cm]")')
   printf(55, inputs.origin[1], f='("origin(2) = ",1f9.3,"     !! V value [cm]")')
   printf(55, inputs.origin[2], f='("origin(3) = ",1f9.3,"     !! W value [cm]")')
   printf(55, '')
   printf(55, '!! Wavelength Grid Settings')
   printf(55, inputs.nlambda, f='("nlambda = ",1i5,"    !! Number of Wavelengths")')
   printf(55, inputs.lambdamin, f='("lambdamin = ",1f9.3,"    !! Minimum Wavelength [nm]")')
   printf(55, inputs.lambdamax, f='("lambdamax = ",1f9.3,"    !! Maximum Wavelength [nm]")')
   printf(55, '')
   printf(55, '!! Weight Function Settings')
   printf(55, inputs.ne_wght, f='("ne_wght = ",i9,"    !! Number of Energies for Weights")')
   printf(55, inputs.np_wght, f='("np_wght = ",i9,"    !! Number of Pitches for Weights")')
   printf(55, inputs.nphi_wght, f='("nphi_wght = ",i9,"    !! Number of Gyro-angles for Weights")')
   printf(55, inputs.emax_wght, f='("emax_wght = ",1f9.2,"    !! Maximum Energy for Weights [keV]")')
   printf(55, inputs.nlambda_wght, f='("nlambda_wght = ",1i5,"    !! Number of Wavelengths for Weights ")')
   printf(55, inputs.lambdamin_wght, f='("lambdamin_wght = ",1f9.3,"    !! Minimum Wavelength for Weights [nm]")')
   printf(55, inputs.lambdamax_wght, f='("lambdamax_wght = ",1f9.3,"    !! Maximum Wavelength for Weights [nm]")')
   printf(55, '')
   printf(55, '/')
   printf(55, '')
   close(55)
   success('Namelist file created: ' + filename)
   
   return _ret()


